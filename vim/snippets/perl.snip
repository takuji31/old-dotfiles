#TODO abbr書いてなさすぎわろた
snippet     pscript
	#!/usr/bin/env perl
	use strict;
	use warnings;
	use 5.010_001;
	${0}

snippet     ps16
	#!/usr/bin/env perl
	use 5.016_001;
	use warnings;
	${0}

snippet     pkg
	package `PerlPackageName()`;
	use strict;
	use warnings;
	use 5.010_001;
	${0}
	1;

snippet     pkg16
	package `PerlPackageName()` {
		use 5.016_001;
		use warnings;
		${0}
	}
	1;

snippet     strict
	use strict;
	use warnings;
	use 5.010_001;
	${0}

snippet     str16
	use 5.016_001;
	use warnings;
	${0}

snippet     lmy
	my ($${1:class}, ${2}) = ${3:@_};${0}

snippet     smy
	my $${1:self} = shift;
	${0}

snippet     sub
	sub ${1} {
		my ($${2:class}, ${3}) = @_;
		${4}
	}

snippet     ssub
	sub ${1} {
		my $${2:class} = shift;
		${3}
	}

snippet     vsub
	sub ${1} {
		state $validator = Data::Validator->new(
			${2}
		)->with(qw/Method${3}/);
		my ($${4:class}, $args) = $validator->validate(@_);
		${5}
	}

snippet     vfsub
	sub ${1} {
		state $validator = Data::Validator->new(
			${2}
		)${3:->with(qw/${4\}/)};
		my $args = $validator->validate(@_);
		${5}
	}
snippet     dv
		state $validator = Data::Validator->new(
			${1}
		)->with(qw/Method${2}/);
		my ($${3:class}, $args) = $validator->validate(@_);

snippet     fdv
		state $validator = Data::Validator->new(
			${1}
		)${2:->with(qw/${3\}/)};
		my ($${4:class}, $args) = $validator->validate(@_);

snippet     import
	sub import {
		my $class  = shift;
		my $caller = caller;
		${1}
	}


snippet     try
prev_word '^'
	try {
		${1}
	} catch {
		${2}
	};

#For WAF
snippet     req
prev_word '^'
	$${1:c}->req->${2}

snippet     rp
	my $$2 = $${1:c}->req->param("${2}");${0}

snippet     rd
	$${1:c}->redirect("${2}");${0}

snippet     st
	$${1:self}->stash->{${2}} = ${3};${0}

snippet     ns
	`PerlPackageName()`${0}
#For container
#TODO 書く

#Fot test
snippet     test
	use strict;
	use warnings;
	use utf8;
	use Test::More;
	${0}
	done_testing;

snippet     testutil
	use strict;
	use warnings;
	use utf8;
	use Test::More;
	use t::Util;
	${0}
	done_testing;

snippet     testfull
	use strict;
	use warnings;
	use utf8;
	use Test::More;
	use Test::Exception;
	use t::Util;
	${0}
	done_testing;

snippet     subtest
	subtest "${1}" => sub {
		${2}
	};

snippet     tservice
	t::Util->test_service(sub {
		${0}
	});

snippet     test_service
	test_service {
		${0}
	};

#For Amon2
snippet     any
	any '${1}' => sub {
		my ($c, $args) = @_;
		${0}
		$c->render('${2}');
	};

snippet     get
	get '${1}' => sub {
		my ($c, $args) = @_;
		${0}
		$c->render('${2}');
	};

snippet     post
	post '${1}' => sub {
		my ($c, $args) = @_;
		${0}
		$c->render('${2}');
	};

snippet     many
	any [qw/${1}/] => '${2}' => sub {
		my ($c, $args) = @_;
		${0}
		$c->render('${2}');
	};

